import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import Calendar
import sqlite3
from datetime import datetime
veritabani = sqlite3.connect('sinavlar.db')
db = veritabani.cursor()
db.execute('''
CREATE TABLE IF NOT EXISTS sinavlar (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           ders TEXT,
           tarih TEXT,
           vize INTEGER,
           final INTEGER,
           bütünleme INTEGER
)
''')
veritabani.commit()
ana_pencere = tk.Tk()
ana_pencere.title("Sınav Takip Programı")
ana_pencere.geometry("1000x700")
def tarih_formatla(tarih_metni):
    for fmt in ("%Y-%m-%d", "%m/%d/%Y"):
        try:
            return datetime.strptime(tarih_metni, fmt).date()
        except ValueError:
            continue
    raise ValueError("Geçersiz tarih formatı")
sekme_panel = ttk.Notebook(ana_pencere)
sekme_panel.pack(fill="both", expand=True)
takip_sekmesi = ttk.Frame(sekme_panel)
sekme_panel.add(takip_sekmesi, text="Sınav Takip")
takvim = Calendar(takip_sekmesi, selectmode='day', date_pattern="yyyy-mm-dd")
takvim.pack(pady=10)
form_cercevesi = ttk.LabelFrame(takip_sekmesi, text="Sınav Bilgileri")
form_cercevesi.pack(pady=10, padx=10, fill="x")
ttk.Label(form_cercevesi, text="DERS:").grid(row=0, column=0, padx=10, pady=5)
ders_alani = ttk.Entry(form_cercevesi)
ders_alani.grid(row=0, column=1, padx=10, pady=5)
ttk.Label(form_cercevesi, text="VİZE:").grid(row=1, column=0, padx=10, pady=5)
vize_alani = ttk.Entry(form_cercevesi)
vize_alani.grid(row=1, column=1, padx=10, pady=5)
ttk.Label(form_cercevesi, text="FİNAL:").grid(row=2, column=0, padx=10, pady=5)
final_alani = ttk.Entry(form_cercevesi)
final_alani.grid(row=2, column=1, padx=10, pady=5)
ttk.Label(form_cercevesi, text="BÜT/PROJE:").grid(row=3, column=0, padx=10, pady=5)
butunleme_alani = ttk.Entry(form_cercevesi)
butunleme_alani.grid(row=3, column=1, padx=10, pady=5)
tablo = ttk.Treeview(takip_sekmesi, columns=("ID", "DERS", "TARİH", "VİZE", "FİNAL", "BÜTÜNLEME"), show="headings")
for kolon in ("ID", "DERS", "TARİH", "VİZE", "FİNAL", "BÜTÜNLEME"):
    tablo.heading(kolon, text=kolon)
    if kolon == "DERS":
        tablo.column(kolon, width=200)
    elif kolon == "ID":
        tablo.column(kolon, width=50)
    else:
        tablo.column(kolon, width=100)
tablo.pack(fill="both", expand=True)
def sinavlari_göster():
    for kayit in tablo.get_children():
        tablo.delete(kayit)
    db.execute("SELECT * FROM sinavlar")
    for satir in db.fetchall():
        tablo.insert("", "end", values=satir)
def sinav_ekle():
    ders = ders_alani.get()
    tarih = takvim.get_date()
    vize = vize_alani.get() or None
    final = final_alani.get() or None
    butunleme = butunleme_alani.get() or None
    if not ders:
        messagebox.showwarning("Uyarı", "Ders alanını doldurunuz!")
        return
    db.execute("INSERT INTO sinavlar (ders, tarih, vize, final, bütünleme) VALUES (?, ?, ?, ?, ?)",
               (ders, tarih, vize, final, butunleme))
    veritabani.commit()
    sinavlari_göster()
    sinav_takvimi_göster()
def sinav_sil():
    secili = tablo.selection()
    if not secili:
        return
    kayit_id = tablo.item(secili)['values'][0]
    db.execute("DELETE FROM sinavlar WHERE id=?", (kayit_id,))
    veritabani.commit()
    sinavlari_göster()
    sinav_takvimi_göster()
def sinav_güncelle():
    secili = tablo.selection()
    if not secili:
        return
    kayit_id = tablo.item(secili)['values'][0]
    db.execute('''UPDATE sinavlar SET 
                ders=?, 
                tarih=?, 
                vize=?, 
                final=?, 
                bütünleme=? 
                WHERE id=?''', 
              (ders_alani.get(), 
               takvim.get_date(), 
               vize_alani.get() or None, 
               final_alani.get() or None, 
               butunleme_alani.get() or None, 
               kayit_id))
    veritabani.commit()
    sinavlari_göster()
    sinav_takvimi_göster()
def kayit_sec(event):
    secili = tablo.selection()
    if secili:
        kayit = tablo.item(secili)['values']
        ders_alani.delete(0, tk.END)
        ders_alani.insert(0, kayit[1])
        takvim.set_date(kayit[2])
        vize_alani.delete(0, tk.END)
        vize_alani.insert(0, kayit[3] if kayit[3] else "")
        final_alani.delete(0, tk.END)
        final_alani.insert(0, kayit[4] if kayit[4] else "")
        butunleme_alani.delete(0, tk.END)
        butunleme_alani.insert(0, kayit[5] if kayit[5] else "")
buton_cercevesi = ttk.Frame(takip_sekmesi)
buton_cercevesi.pack(pady=10)
ttk.Button(buton_cercevesi, text="EKLE", command=sinav_ekle).pack(side="left", padx=5)
ttk.Button(buton_cercevesi, text="GÜNCELLE", command=sinav_güncelle).pack(side="left", padx=5)
ttk.Button(buton_cercevesi, text="SİL", command=sinav_sil).pack(side="left", padx=5)
takvim_sekmesi = ttk.Frame(sekme_panel)
sekme_panel.add(takvim_sekmesi, text="Takvim")
sinav_takvimi = Calendar(takvim_sekmesi, selectmode='day', date_pattern='yyyy-mm-dd')
sinav_takvimi.pack(fill="both", expand=True, pady=10)
def sinav_takvimi_göster():
    sinav_takvimi.calevent_remove('all')
    db.execute("SELECT tarih, ders FROM sinavlar")
    for tarih, ders in db.fetchall():
        try:
            tarih_obj = tarih_formatla(tarih)
            sinav_takvimi.calevent_create(tarih_obj, ders, 'sinav')
        except:
            continue
    sinav_takvimi.tag_config('sinav', background='red', foreground='white')
tablo.bind("<Double-1>", kayit_sec)
sinav_takvimi.bind("<<CalendarSelected>>", 
                 lambda e: messagebox.showinfo("Sınavlar", "\n".join(
                     [f"{ders}" for (tarih, ders) in db.execute("SELECT tarih, ders FROM sinavlar WHERE tarih=?", 
                     (sinav_takvimi.get_date(),))])))
sinavlari_göster()
sinav_takvimi_göster()
ana_pencere.mainloop()
